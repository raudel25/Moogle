@page "/"

<PageTitle>Moogle!</PageTitle>

<div>
    <h1>🔍 Moogle!</h1>

    <div style="display:inline-flex;">
        <input list="auto" class="search"  @bind="query" @bind:event="oninput" placeholder="Introduzca su búsqueda" @onkeyup="Press">

        <button type="default" class="btn-eliminate" @onclick="EliminateQuery">⨯</button>

        <button type="default" class="btn-search"  @onclick="RunQuery" ><img src="/Search.jpg" align="left" width="32px" height="32px"></button>
        <datalist id="auto">
            @foreach (var item in autoComp)
            {
                <option value="@item"></option>
            }
        </datalist>
    </div>
</div>

@if (!string.IsNullOrEmpty(result.Suggestion))
{
    <div class="suggestion">
        <p>¿Quisiste decir <strong><a href="#" @onclick="Suggestion">@result.Suggestion</a></strong>?</p>
    </div>
}
else
{
    @if(result.Count==0 && Search)
    {
        <ul>
            <img src="/No_Results.jpg" width="350px" height="350px">
            <h5>No hay resultados para su búsqueda😢</h5>
        </ul>
    }
}

@if(!Search)
{
    <ul>
        <img src="Start Search.jpg" width="350px" height="350px">
    </ul>
}

<ul class="results">
    @foreach (var item in result.Items())
    {    
        <div class="item">
            <p class="title"><a onmouseover="this.style.color='blue'" onmouseout="this.style.color='black'" style="color: black; font-size:large; text-decoration: none;"  target='__blank' href=@(item.Title+"/"+0+"/"+(-1))>@item.Title</a></p>
                @for (int i = 0; i < item.Snippet.Length; i++)
                {
                    <p>... <a onmouseover="this.style.color='blue'" onmouseout="this.style.color='black'" style="color: black; text-decoration: none; font-size:medium;"  target='__blank' href=@(item.Title+"/"+(item.Pos_Snippet[i]-item.Pos_Snippet[i]%100)+"/"+item.Pos_Snippet[i])>@item.Snippet[i]</a> ...</p>
                }
                <div style="font-size:small;">
                @if(item.Word_no_doc.Count!=0)
                {
                    <span>Falta(n): </span>
                }
                @foreach (var item1 in item.Word_no_doc)
                {
                    <span style="text-decoration: line-through;">@(item1+" ")</span>       
                }
                @if(item.Word_no_doc.Count!=0)
                {
                    <span> | Incluir: </span>
                }
                @foreach (var item1 in item.Word_no_doc)
                {
                    <span><a href="#" @onclick="()=>Include(item1)" onmouseover="this.style.color='blue'" onmouseout="this.style.color='black'" style="color: black; text-decoration: none;">@(item1+" ")</a></span>
                }
                </div>
        </div>       
        <br>
    }
</ul>

@code {
    private string query = "";
    private List<string> autoComp = new List<string>();
    private SearchResult result = new SearchResult();
    private bool Search=false;
    private void Include(string s)
    {
        query="^"+s;
        RunQuery();
    }
    private void RunQuery()
    {
        Search=true;
        result = Moogle.Query(query);
    }
    private void Suggestion()
    {
        Search=true;
        query=result.Suggestion;
        result = result.Query_Suggestion;
    }
    private void EliminateQuery()
    {
        query="";
    }
    private void Press(KeyboardEventArgs e)
    {
        System.Text.StringBuilder query_aux = new System.Text.StringBuilder(query);
        if (e.Code == "Enter")
        {
            RunQuery();
        }
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        int start = 0; int stop = 0; bool no_letter = false;
        //Buscamos la ultima porcion de la query alfanumerica
        for (int i = 0; i < query_aux.Length; i++)
        {
            if (!char.IsLetterOrDigit(query_aux[i])) no_letter = true;
            else
            {
                if (no_letter)
                {
                    no_letter = false;
                    sb = new System.Text.StringBuilder();
                    start = i;
                    stop = 0;
                }
                sb.Append(query_aux[i]);
                stop++;
            }
        }
        string auto = sb.ToString();
        if (query != "")
        {
            List<int> change = new List<int>();
            string aux = auto.ToLower();
            //Guardamos las posiciones de las mayusculas
            for (int i = 0; i < auto.Length; i++)
            {
                if (auto[i] != aux[i]) change.Add(i);
            }
            autoComp = Server.AutoComplete(aux);
            //Actualizar las mayusculas y minusculas y completar con la recomendacion
            for (int i = 0; i < autoComp.Count; i++)
            {
                System.Text.StringBuilder Add_autoComp = new System.Text.StringBuilder(query_aux.ToString());
                sb = new System.Text.StringBuilder(autoComp[i]);
                for (int j = 0; j < change.Count; j++)
                {
                    sb[change[j]] = Char.ToUpper(sb[change[j]]);
                }
                Add_autoComp.Remove(start, stop);
                Add_autoComp.Insert(start, sb.ToString());
                autoComp[i] = Add_autoComp.ToString();
            }
        }
    }
}