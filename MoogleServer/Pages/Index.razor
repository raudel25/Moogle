@page "/"
@using System.Text

<PageTitle>Moogle!</PageTitle>

<div>
    <h1>🔍 Moogle!</h1>

    <div style="display:inline-flex;">
        <input list="auto" class="search" @bind="_query" @bind:event="oninput" placeholder="Introduzca su búsqueda" @onkeyup="Press">

        @if (_query != "")
        {
            <button class="btn-eliminate" @onclick="EliminateQuery">⨯</button>
        }
        else
        {
            <button class="btn-eliminate"></button>
        }

        <button class="btn-search" @onclick="RunQuery">
            <img src="/Search.jpg" width="32px" height="32px" alt="">
        </button>
        <datalist id="auto">
            @foreach (var item in _autoComp)
            {
                <option value="@item"></option>
            }
        </datalist>
    </div>
</div>

@if (!string.IsNullOrEmpty(_result.Suggestion))
{
    <div class="suggestion">
        <p>
            ¿Quisiste decir
            <strong>
                <a href="#" @onclick="Suggestion">@_result.Suggestion</a>
            </strong>?
        </p>
    </div>
}
else
{
    @if (_result.Count == 0 && _search)
    {
        <ul>
            <img src="/NoResults.jpg" width="350px" height="350px" alt="">
            <h5>No hay resultados para su búsqueda😢</h5>
        </ul>
    }
}

@if (!_search)
{
    <ul>
        <img src="/Start Search.jpg" width="350px" height="350px" alt="">
    </ul>
}

<ul class="results">
    @foreach (var item in _result.Items())
    {
        <div class="center">
            <div>
                <div class="center">
                    <p>
                        <a onmouseover="this.style.color='blue'" onmouseout="this.style.color='black'" style="color: black; font-size:large; text-decoration: none;" target='__blank' href=@(item.Title + "/" + 0 + "/" + -1)>@item.Title</a>
                    </p>
                </div>
                @for (var i = 0; i < item.Snippet.Length; i++)
                {
                    <p>... <a onmouseover="this.style.color='blue'" onmouseout="this.style.color='black'" style="color: black; text-decoration: none; font-size:medium;" target='__blank' href=@(item.Title + "/" + (item.PosSnippet[i] - item.PosSnippet[i] % 100) + "/" + item.PosSnippet[i])>@item.Snippet[i]</a> ...</p>
                }
                <div class="no-doc">
                    @if (item.WordNoDoc.Count != 0)
                    {
                        <span>Falta(n): </span>
                    }
                    @foreach (var item1 in item.WordNoDoc)
                    {
                        <span style="text-decoration: line-through;">@(item1 + " ")</span>
                    }
                    @if (item.WordNoDoc.Count != 0)
                    {
                        <span> | Incluir: </span>
                    }
                    @foreach (var item1 in item.WordNoDoc)
                    {
                        <span>
                            <a href="#" @onclick="() => Include(item1)" onmouseover="this.style.color='blue'" onmouseout="this.style.color='black'" style="color: black; text-decoration: none;">@(item1 + " ")</a>
                        </span>
                    }
                </div>
            </div>
        </div>
        <br>
    }
</ul>

@code {
    private string _query = "";
    private List<string> _autoComp = new();
    private SearchResult _result = new();
    private bool _search;

    private void Include(string s)
    {
        _query = "^" + s;
        RunQuery();
    }

    private void RunQuery()
    {
        _search = true;
        _result = Moogle.Query(_query);
    }

    private void Suggestion()
    {
        _search = true;
        _query = _result.Suggestion;
        _result = _result.QuerySuggestion;
    }

    private void EliminateQuery()
    {
        _query = "";
    }

    private void Press(KeyboardEventArgs e)
    {
        var queryAux = new StringBuilder(_query);
        if (e.Code == "Enter")
        {
            RunQuery();
        }

        var sb = new StringBuilder();
        var start = 0;
        var stop = 0;
        var noLetter = false;

    //Buscamos la ultima porcion de la query alfanumerica
        for (var i = 0; i < queryAux.Length; i++)
        {
            if (!char.IsLetterOrDigit(queryAux[i])) noLetter = true;
            else
            {
                if (noLetter)
                {
                    noLetter = false;
                    sb = new StringBuilder();
                    start = i;
                    stop = 0;
                }
                sb.Append(queryAux[i]);
                stop++;
            }
        }

        var auto = sb.ToString();
        if (_query != "")
        {
            var change = new List<int>();
            var aux = auto.ToLower();

    //Guardamos las posiciones de las mayusculas
            for (var i = 0; i < auto.Length; i++)
            {
                if (auto[i] != aux[i]) change.Add(i);
            }

            _autoComp = Server.AutoComplete(aux);

    //Actualizar las mayusculas y minusculas y completar con la recomendacion
            for (var i = 0; i < _autoComp.Count; i++)
            {
                var addAutoComp = new StringBuilder(queryAux.ToString());
                sb = new StringBuilder(_autoComp[i]);
                foreach (var t in change)
                {
                    sb[t] = char.ToUpper(sb[t]);
                }
                addAutoComp.Remove(start, stop);
                addAutoComp.Insert(start, sb.ToString());
                _autoComp[i] = addAutoComp.ToString();
            }
        }
    }

}